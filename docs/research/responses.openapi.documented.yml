openapi: 3.1.0
info:
  title: OpenAI API
  description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  version: 2.3.0
  termsOfService: https://openai.com/policies/terms-of-use
  contact:
    name: OpenAI Support
    url: https://help.openai.com/
  license:
    name: MIT
    url: https://github.com/openai/openai-openapi/blob/master/LICENSE
servers:
  - url: https://api.openai.com/v1
security:
  - ApiKeyAuth: []
tags:
  - name: Assistants
    description: Build Assistants that can call models and use tools.
  - name: Audio
    description: Turn audio into text or text into audio.
  - name: Chat
    description: Given a list of messages comprising a conversation, the model will return a response.
  - name: Conversations
    description: Manage conversations and conversation items.
  - name: Completions
    description: >-
      Given a prompt, the model will return one or more predicted completions, and can also return the
      probabilities of alternative tokens at each position.
  - name: Embeddings
    description: >-
      Get a vector representation of a given input that can be easily consumed by machine learning models and
      algorithms.
  - name: Evals
    description: Manage and run evals in the OpenAI platform.
  - name: Fine-tuning
    description: Manage fine-tuning jobs to tailor a model to your specific training data.
  - name: Graders
    description: Manage and run graders in the OpenAI platform.
  - name: Batch
    description: Create large batches of API requests to run asynchronously.
  - name: Files
    description: Files are used to upload documents that can be used with features like Assistants and Fine-tuning.
  - name: Uploads
    description: Use Uploads to upload large files in multiple parts.
  - name: Images
    description: Given a prompt and/or an input image, the model will generate a new image.
  - name: Models
    description: List and describe the various models available in the API.
  - name: Moderations
    description: Given text and/or image inputs, classifies if those inputs are potentially harmful.
  - name: Audit Logs
    description: List user actions and configuration changes within this organization.
paths:
  /responses:
    post:
      operationId: createResponse
      tags:
        - Responses
      summary: Create a model response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResponse'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ResponseStreamEvent'
      x-oaiMeta:
        name: Create a model response
        group: responses
        returns: |
          Returns a [Response](https://platform.openai.com/docs/api-reference/responses/object) object.
        path: create
        examples:
          - title: Text input
            request:
              curl: |
                curl https://api.openai.com/v1/responses \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "gpt-4.1",
                    "input": "Tell me a three sentence bedtime story about a unicorn."
                  }'
              javascript: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                const response = await openai.responses.create({
                    model: "gpt-4.1",
                    input: "Tell me a three sentence bedtime story about a unicorn."
                });

                console.log(response);
              python: |-
                from openai import OpenAI

                client = OpenAI(
                    api_key="My API Key",
                )
                response = client.responses.create()
                print(response.id)
              csharp: >
                using System;

                using OpenAI.Responses;


                OpenAIResponseClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );


                OpenAIResponse response = client.CreateResponse("Tell me a three sentence bedtime story about
                a unicorn.");


                Console.WriteLine(response.GetOutputText());
              node.js: |-
                import OpenAI from 'openai';

                const client = new OpenAI({
                  apiKey: 'My API Key',
                });

                const response = await client.responses.create();

                console.log(response.id);
              go: |
                package main

                import (
                  "context"
                  "fmt"

                  "github.com/openai/openai-go"
                  "github.com/openai/openai-go/option"
                  "github.com/openai/openai-go/responses"
                )

                func main() {
                  client := openai.NewClient(
                    option.WithAPIKey("My API Key"),
                  )
                  response, err := client.Responses.New(context.TODO(), responses.ResponseNewParams{

                  })
                  if err != nil {
                    panic(err.Error())
                  }
                  fmt.Printf("%+v\n", response.ID)
                }
              java: |-
                package com.openai.example;

                import com.openai.client.OpenAIClient;
                import com.openai.client.okhttp.OpenAIOkHttpClient;
                import com.openai.models.responses.Response;
                import com.openai.models.responses.ResponseCreateParams;

                public final class Main {
                    private Main() {}

                    public static void main(String[] args) {
                        OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                        Response response = client.responses().create();
                    }
                }
              ruby: |-
                require "openai"

                openai = OpenAI::Client.new(api_key: "My API Key")

                response = openai.responses.create

                puts(response)
            response: |
              {
                "id": "resp_67ccd2bed1ec8190b14f964abc0542670bb6a6b452d3795b",
                "object": "response",
                "created_at": 1741476542,
                "status": "completed",
                "error": null,
                "incomplete_details": null,
                "instructions": null,
                "max_output_tokens": null,
                "model": "gpt-4.1-2025-04-14",
                "output": [
                  {
                    "type": "message",
                    "id": "msg_67ccd2bf17f0819081ff3bb2cf6508e60bb6a6b452d3795b",
                    "status": "completed",
                    "role": "assistant",
                    "content": [
                      {
                        "type": "output_text",
                        "text": "In a peaceful grove beneath a silver moon, a unicorn named Lumina discovered a hidden pool that reflected the stars. As she dipped her horn into the water, the pool began to shimmer, revealing a pathway to a magical realm of endless night skies. Filled with wonder, Lumina whispered a wish for all who dream to find their own hidden magic, and as she glanced back, her hoofprints sparkled like stardust.",
                        "annotations": []
                      }
                    ]
                  }
                ],
                "parallel_tool_calls": true,
                "previous_response_id": null,
                "reasoning": {
                  "effort": null,
                  "summary": null
                },
                "store": true,
                "temperature": 1.0,
                "text": {
                  "format": {
                    "type": "text"
                  }
                },
                "tool_choice": "auto",
                "tools": [],
                "top_p": 1.0,
                "truncation": "disabled",
                "usage": {
                  "input_tokens": 36,
                  "input_tokens_details": {
                    "cached_tokens": 0
                  },
                  "output_tokens": 87,
                  "output_tokens_details": {
                    "reasoning_tokens": 0
                  },
                  "total_tokens": 123
                },
                "user": null,
                "metadata": {}
              }
          - title: Image input
            request:
              curl: |
                curl https://api.openai.com/v1/responses \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "gpt-4.1",
                    "input": [
                      {
                        "role": "user",
                        "content": [
                          {"type": "input_text", "text": "what is in this image?"},
                          {
                            "type": "input_image",
                            "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                          }
                        ]
                      }
                    ]
                  }'
              javascript: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                const response = await openai.responses.create({
                    model: "gpt-4.1",
                    input: [
                        {
                            role: "user",
                            content: [
                                { type: "input_text", text: "what is in this image?" },
                                {
                                    type: "input_image",
                                    image_url:
                                        "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                                },
                            ],
                        },
                    ],
                });

                console.log(response);
              python: |-
                from openai import OpenAI

                client = OpenAI(
                    api_key="My API Key",
                )
                response = client.responses.create()
                print(response.id)
              csharp: |
                using System;
                using System.Collections.Generic;

                using OpenAI.Responses;

                OpenAIResponseClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );

                List<ResponseItem> inputItems =
                [
                    ResponseItem.CreateUserMessageItem(
                        [
                            ResponseContentPart.CreateInputTextPart("What is in this image?"),
                            ResponseContentPart.CreateInputImagePart(new Uri("https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"))
                        ]
                    )
                ];

                OpenAIResponse response = client.CreateResponse(inputItems);

                Console.WriteLine(response.GetOutputText());
              node.js: |-
                import OpenAI from 'openai';

                const client = new OpenAI({
                  apiKey: 'My API Key',
                });

                const response = await client.responses.create();

                console.log(response.id);
              go: |
                package main

                import (
                  "context"
                  "fmt"

                  "github.com/openai/openai-go"
                  "github.com/openai/openai-go/option"
                  "github.com/openai/openai-go/responses"
                )

                func main() {
                  client := openai.NewClient(
                    option.WithAPIKey("My API Key"),
                  )
                  response, err := client.Responses.New(context.TODO(), responses.ResponseNewParams{

                  })
                  if err != nil {
                    panic(err.Error())
                  }
                  fmt.Printf("%+v\n", response.ID)
                }
              java: |-
                package com.openai.example;

                import com.openai.client.OpenAIClient;
                import com.openai.client.okhttp.OpenAIOkHttpClient;
                import com.openai.models.responses.Response;
                import com.openai.models.responses.ResponseCreateParams;

                public final class Main {
                    private Main() {}

                    public static void main(String[] args) {
                        OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                        Response response = client.responses().create();
                    }
                }
              ruby: |-
                require "openai"

                openai = OpenAI::Client.new(api_key: "My API Key")

                response = openai.responses.create

                puts(response)
            response: |
              {
                "id": "resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41",
                "object": "response",
                "created_at": 1741476777,
                "status": "completed",
                "error": null,
                "incomplete_details": null,
                "instructions": null,
                "max_output_tokens": null,
                "model": "gpt-4.1-2025-04-14",
                "output": [
                  {
                    "type": "message",
                    "id": "msg_67ccd3acc8d48190a77525dc6de64b4104becb25c45c1d41",
                    "status": "completed",
                    "role": "assistant",
                    "content": [
                      {
                        "type": "output_text",
                        "text": "The image depicts a scenic landscape with a wooden boardwalk or pathway leading through lush, green grass under a blue sky with some clouds. The setting suggests a peaceful natural area, possibly a park or nature reserve. There are trees and shrubs in the background.",
                        "annotations": []
                      }
                    ]
                  }
                ],
                "parallel_tool_calls": true,
                "previous_response_id": null,
                "reasoning": {
                  "effort": null,
                  "summary": null
                },
                "store": true,
                "temperature": 1.0,
                "text": {
                  "format": {
                    "type": "text"
                  }
                },
                "tool_choice": "auto",
                "tools": [],
                "top_p": 1.0,
                "truncation": "disabled",
                "usage": {
                  "input_tokens": 328,
                  "input_tokens_details": {
                    "cached_tokens": 0
                  },
                  "output_tokens": 52,
                  "output_tokens_details": {
                    "reasoning_tokens": 0
                  },
                  "total_tokens": 380
                },
                "user": null,
                "metadata": {}
              }
          - title: File input
            request:
              curl: |
                curl https://api.openai.com/v1/responses \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "gpt-4.1",
                    "input": [
                      {
                        "role": "user",
                        "content": [
                          {"type": "input_text", "text": "what is in this file?"},
                          {
                            "type": "input_file",
                            "file_url": "https://www.berkshirehathaway.com/letters/2024ltr.pdf"
                          }
                        ]
                      }
                    ]
                  }'
              javascript: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                const response = await openai.responses.create({
                    model: "gpt-4.1",
                    input: [
                        {
                            role: "user",
                            content: [
                                { type: "input_text", text: "what is in this file?" },
                                {
                                    type: "input_file",
                                    file_url: "https://www.berkshirehathaway.com/letters/2024ltr.pdf",
                                },
                            ],
                        },
                    ],
                });

                console.log(response);
              python: |-
                from openai import OpenAI

                client = OpenAI(
                    api_key="My API Key",
                )
                response = client.responses.create()
                print(response.id)
              node.js: |-
                import OpenAI from 'openai';

                const client = new OpenAI({
                  apiKey: 'My API Key',
                });

                const response = await client.responses.create();

                console.log(response.id);
              go: |
                package main

                import (
                  "context"
                  "fmt"

                  "github.com/openai/openai-go"
                  "github.com/openai/openai-go/option"
                  "github.com/openai/openai-go/responses"
                )

                func main() {
                  client := openai.NewClient(
                    option.WithAPIKey("My API Key"),
                  )
                  response, err := client.Responses.New(context.TODO(), responses.ResponseNewParams{

                  })
                  if err != nil {
                    panic(err.Error())
                  }
                  fmt.Printf("%+v\n", response.ID)
                }
              java: |-
                package com.openai.example;

                import com.openai.client.OpenAIClient;
                import com.openai.client.okhttp.OpenAIOkHttpClient;
                import com.openai.models.responses.Response;
                import com.openai.models.responses.ResponseCreateParams;

                public final class Main {
                    private Main() {}

                    public static void main(String[] args) {
                        OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                        Response response = client.responses().create();
                    }
                }
              ruby: |-
                require "openai"

                openai = OpenAI::Client.new(api_key: "My API Key")

                response = openai.responses.create

                puts(response)
            response: |
              {
                "id": "resp_686eef60237881a2bd1180bb8b13de430e34c516d176ff86",
                "object": "response",
                "created_at": 1752100704,
                "status": "completed",
                "background": false,
                "error": null,
                "incomplete_details": null,
                "instructions": null,
                "max_output_tokens": null,
                "max_tool_calls": null,
                "model": "gpt-4.1-2025-04-14",
                "output": [
                  {
                    "id": "msg_686eef60d3e081a29283bdcbc4322fd90e34c516d176ff86",
                    "type": "message",
                    "status": "completed",
                    "content": [
                      {
                        "type": "output_text",
                        "annotations": [],
                        "logprobs": [],
                        "text": "The file seems to contain excerpts from a letter to the shareholders of Berkshire Hathaway Inc., likely written by Warren Buffett. It covers several topics:\n\n1. **Communication Philosophy**: Buffett emphasizes the importance of transparency and candidness in reporting mistakes and successes to shareholders.\n\n2. **Mistakes and Learnings**: The letter acknowledges past mistakes in business assessments and management hires, highlighting the importance of correcting errors promptly.\n\n3. **CEO Succession**: Mention of Greg Abel stepping in as the new CEO and continuing the tradition of honest communication.\n\n4. **Pete Liegl Story**: A detailed account of acquiring Forest River and the relationship with its founder, highlighting trust and effective business decisions.\n\n5. **2024 Performance**: Overview of business performance, particularly in insurance and investment activities, with a focus on GEICO's improvement.\n\n6. **Tax Contributions**: Discussion of significant tax payments to the U.S. Treasury, credited to shareholders' reinvestments.\n\n7. **Investment Strategy**: A breakdown of Berkshire\u2019s investments in both controlled subsidiaries and marketable equities, along with a focus on long-term holding strategies.\n\n8. **American Capitalism**: Reflections on America\u2019s economic development and Berkshire\u2019s role within it.\n\n9. **Property-Casualty Insurance**: Insights into the P/C insurance business model and its challenges and benefits.\n\n10. **Japanese Investments**: Information about Berkshire\u2019s investments in Japanese companies and future plans.\n\n11. **Annual Meeting**: Details about the upcoming annual gathering in Omaha, including schedule changes and new book releases.\n\n12. **Personal Anecdotes**: Light-hearted stories about family and interactions, conveying Buffett's personable approach.\n\n13. **Financial Performance Data**: Tables comparing Berkshire\u2019s annual performance to the S&P 500, showing impressive long-term gains.\n\nOverall, the letter reinforces Berkshire Hathaway's commitment to transparency, investment in both its businesses and the wider economy, and emphasizes strong leadership and prudent financial management."
                      }
                    ],
                    "role": "assistant"
                  }
                ],
                "parallel_tool_calls": true,
                "previous_response_id": null,
                "reasoning": {
                  "effort": null,
                  "summary": null
                },
                "service_tier": "default",
                "store": true,
                "temperature": 1.0,
                "text": {
                  "format": {
                    "type": "text"
                  }
                },
                "tool_choice": "auto",
                "tools": [],
                "top_logprobs": 0,
                "top_p": 1.0,
                "truncation": "disabled",
                "usage": {
                  "input_tokens": 8438,
                  "input_tokens_details": {
                    "cached_tokens": 0
                  },
                  "output_tokens": 398,
                  "output_tokens_details": {
                    "reasoning_tokens": 0
                  },
                  "total_tokens": 8836
                },
                "user": null,
                "metadata": {}
              }
          - title: Web search
            request:
              curl: |
                curl https://api.openai.com/v1/responses \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "gpt-4.1",
                    "tools": [{ "type": "web_search_preview" }],
                    "input": "What was a positive news story from today?"
                  }'
              javascript: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                const response = await openai.responses.create({
                    model: "gpt-4.1",
                    tools: [{ type: "web_search_preview" }],
                    input: "What was a positive news story from today?",
                });

                console.log(response);
              python: |-
                from openai import OpenAI

                client = OpenAI(
                    api_key="My API Key",
                )
                response = client.responses.create()
                print(response.id)
              csharp: |
                using System;

                using OpenAI.Responses;

                OpenAIResponseClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );

                string userInputText = "What was a positive news story from today?";

                ResponseCreationOptions options = new()
                {
                    Tools =
                    {
                        ResponseTool.CreateWebSearchTool()
                    },
                };

                OpenAIResponse response = client.CreateResponse(userInputText, options);

                Console.WriteLine(response.GetOutputText());
              node.js: |-
                import OpenAI from 'openai';

                const client = new OpenAI({
                  apiKey: 'My API Key',
                });

                const response = await client.responses.create();

                console.log(response.id);
              go: |
                package main

                import (
                  "context"
                  "fmt"

                  "github.com/openai/openai-go"
                  "github.com/openai/openai-go/option"
                  "github.com/openai/openai-go/responses"
                )

                func main() {
                  client := openai.NewClient(
                    option.WithAPIKey("My API Key"),
                  )
                  response, err := client.Responses.New(context.TODO(), responses.ResponseNewParams{

                  })
                  if err != nil {
                    panic(err.Error())
                  }
                  fmt.Printf("%+v\n", response.ID)
                }
              java: |-
                package com.openai.example;

                import com.openai.client.OpenAIClient;
                import com.openai.client.okhttp.OpenAIOkHttpClient;
                import com.openai.models.responses.Response;
                import com.openai.models.responses.ResponseCreateParams;

                public final class Main {
                    private Main() {}

                    public static void main(String[] args) {
                        OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                        Response response = client.responses().create();
                    }
                }
              ruby: |-
                require "openai"

                openai = OpenAI::Client.new(api_key: "My API Key")

                response = openai.responses.create

                puts(response)
            response: |
              {
                "id": "resp_67ccf18ef5fc8190b16dbee19bc54e5f087bb177ab789d5c",
                "object": "response",
                "created_at": 1741484430,
                "status": "completed",
                "error": null,
                "incomplete_details": null,
                "instructions": null,
                "max_output_tokens": null,
                "model": "gpt-4.1-2025-04-14",
                "output": [
                  {
                    "type": "web_search_call",
                    "id": "ws_67ccf18f64008190a39b619f4c8455ef087bb177ab789d5c",
                    "status": "completed"
                  },
                  {
                    "type": "message",
                    "id": "msg_67ccf190ca3881909d433c50b1f6357e087bb177ab789d5c",
                    "status": "completed",
                    "role": "assistant",
                    "content": [
                      {
                        "type": "output_text",
                        "text": "As of today, March 9, 2025, one notable positive news story...",
                        "annotations": [
                          {
                            "type": "url_citation",
                            "start_index": 442,
                            "end_index": 557,
                            "url": "https://.../?utm_source=chatgpt.com",
                            "title": "..."
                          },
                          {
                            "type": "url_citation",
                            "start_index": 962,
                            "end_index": 1077,
                            "url": "https://.../?utm_source=chatgpt.com",
                            "title": "..."
                          },
                          {
                            "type": "url_citation",
                            "start_index": 1336,
                            "end_index": 1451,
                            "url": "https://.../?utm_source=chatgpt.com",
                            "title": "..."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "parallel_tool_calls": true,
                "previous_response_id": null,
                "reasoning": {
                  "effort": null,
                  "summary": null
                },
                "store": true,
                "temperature": 1.0,
                "text": {
                  "format": {
                    "type": "text"
                  }
                },
                "tool_choice": "auto",
                "tools": [
                  {
                    "type": "web_search_preview",
                    "domains": [],
                    "search_context_size": "medium",
                    "user_location": {
                      "type": "approximate",
                      "city": null,
                      "country": "US",
                      "region": null,
                      "timezone": null
                    }
                  }
                ],
                "top_p": 1.0,
                "truncation": "disabled",
                "usage": {
                  "input_tokens": 328,
                  "input_tokens_details": {
                    "cached_tokens": 0
                  },
                  "output_tokens": 356,
                  "output_tokens_details": {
                    "reasoning_tokens": 0
                  },
                  "total_tokens": 684
                },
                "user": null,
                "metadata": {}
              }
          - title: File search
            request:
              curl: |
                curl https://api.openai.com/v1/responses \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "gpt-4.1",
                    "tools": [{
                      "type": "file_search",
                      "vector_store_ids": ["vs_1234567890"],
                      "max_num_results": 20
                    }],
                    "input": "What are the attributes of an ancient brown dragon?"
                  }'
              javascript: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                const response = await openai.responses.create({
                    model: "gpt-4.1",
                    tools: [{
                      type: "file_search",
                      vector_store_ids: ["vs_1234567890"],
                      max_num_results: 20
                    }],
                    input: "What are the attributes of an ancient brown dragon?",
                });

                console.log(response);
              python: |-
                from openai import OpenAI

                client = OpenAI(
                    api_key="My API Key",
                )
                response = client.responses.create()
                print(response.id)
              csharp: |
                using System;

                using OpenAI.Responses;

                OpenAIResponseClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );

                string userInputText = "What are the attributes of an ancient brown dragon?";

                ResponseCreationOptions options = new()
                {
                    Tools =
                    {
                        ResponseTool.CreateFileSearchTool(
                            vectorStoreIds: ["vs_1234567890"],
                            maxResultCount: 20
                        )
                    },
                };

                OpenAIResponse response = client.CreateResponse(userInputText, options);

                Console.WriteLine(response.GetOutputText());
              node.js: |-
                import OpenAI from 'openai';

                const client = new OpenAI({
                  apiKey: 'My API Key',
                });

                const response = await client.responses.create();

                console.log(response.id);
              go: |
                package main

                import (
                  "context"
                  "fmt"

                  "github.com/openai/openai-go"
                  "github.com/openai/openai-go/option"
                  "github.com/openai/openai-go/responses"
                )

                func main() {
                  client := openai.NewClient(
                    option.WithAPIKey("My API Key"),
                  )
                  response, err := client.Responses.New(context.TODO(), responses.ResponseNewParams{

                  })
                  if err != nil {
                    panic(err.Error())
                  }
                  fmt.Printf("%+v\n", response.ID)
                }
              java: |-
                package com.openai.example;

                import com.openai.client.OpenAIClient;
                import com.openai.client.okhttp.OpenAIOkHttpClient;
                import com.openai.models.responses.Response;
                import com.openai.models.responses.ResponseCreateParams;

                public final class Main {
                    private Main() {}

                    public static void main(String[] args) {
                        OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                        Response response = client.responses().create();
                    }
                }
              ruby: |-
                require "openai"

                openai = OpenAI::Client.new(api_key: "My API Key")

                response = openai.responses.create

                puts(response)
            response: |
              {
                "id": "resp_67ccf4c55fc48190b71bd0463ad3306d09504fb6872380d7",
                "object": "response",
                "created_at": 1741485253,
                "status": "completed",
                "error": null,
                "incomplete_details": null,
                "instructions": null,
                "max_output_tokens": null,
                "model": "gpt-4.1-2025-04-14",
                "output": [
                  {
                    "type": "file_search_call",
                    "id": "fs_67ccf4c63cd08190887ef6464ba5681609504fb6872380d7",
                    "status": "completed",
                    "queries": [
                      "attributes of an ancient brown dragon"
                    ],
                    "results": null
                  },
                  {
                    "type": "message",
                    "id": "msg_67ccf4c93e5c81909d595b369351a9d309504fb6872380d7",
                    "status": "completed",
                    "role": "assistant",
                    "content": [
                      {
                        "type": "output_text",
                        "text": "The attributes of an ancient brown dragon include...",
                        "annotations": [
                          {
                            "type": "file_citation",
                            "index": 320,
                            "file_id": "file-4wDz5b167pAf72nx1h9eiN",
                            "filename": "dragons.pdf"
                          },
                          {
                            "type": "file_citation",
                            "index": 576,
                            "file_id": "file-4wDz5b167pAf72nx1h9eiN",
                            "filename": "dragons.pdf"
                          },
                          {
                            "type": "file_citation",
                            "index": 815,
                            "file_id": "file-4wDz5b167pAf72nx1h9eiN",
                            "filename": "dragons.pdf"
                          },
                          {
                            "type": "file_citation",
                            "index": 815,
                            "file_id": "file-4wDz5b167pAf72nx1h9eiN",
                            "filename": "dragons.pdf"
                          },
                          {
                            "type": "file_citation",
                            "index": 1030,
                            "file_id": "file-4wDz5b167pAf72nx1h9eiN",
                            "filename": "dragons.pdf"
                          },
                          {
                            "type": "file_citation",
                            "index": 1030,
                            "file_id": "file-4wDz5b167pAf72nx1h9eiN",
                            "filename": "dragons.pdf"
                          },
                          {
                            "type": "file_citation",
                            "index": 1156,
                            "file_id": "file-4wDz5b167pAf72nx1h9eiN",
                            "filename": "dragons.pdf"
                          },
                          {
                            "type": "file_citation",
                            "index": 1225,
                            "file_id": "file-4wDz5b167pAf72nx1h9eiN",
                            "filename": "dragons.pdf"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "parallel_tool_calls": true,
                "previous_response_id": null,
                "reasoning": {
                  "effort": null,
                  "summary": null
                },
                "store": true,
                "temperature": 1.0,
                "text": {
                  "format": {
                    "type": "text"
                  }
                },
                "tool_choice": "auto",
                "tools": [
                  {
                    "type": "file_search",
                    "filters": null,
                    "max_num_results": 20,
                    "ranking_options": {
                      "ranker": "auto",
                      "score_threshold": 0.0
                    },
                    "vector_store_ids": [
                      "vs_1234567890"
                    ]
                  }
                ],
                "top_p": 1.0,
                "truncation": "disabled",
                "usage": {
                  "input_tokens": 18307,
                  "input_tokens_details": {
                    "cached_tokens": 0
                  },
                  "output_tokens": 348,
                  "output_tokens_details": {
                    "reasoning_tokens": 0
                  },
                  "total_tokens": 18655
                },
                "user": null,
                "metadata": {}
              }      
          - title: Streaming
            request:
              curl: |
                curl https://api.openai.com/v1/responses \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "gpt-4.1",
                    "instructions": "You are a helpful assistant.",
                    "input": "Hello!",
                    "stream": true
                  }'
              python: |-
                from openai import OpenAI

                client = OpenAI(
                    api_key="My API Key",
                )
                response = client.responses.create()
                print(response.id)
              javascript: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                const response = await openai.responses.create({
                    model: "gpt-4.1",
                    instructions: "You are a helpful assistant.",
                    input: "Hello!",
                    stream: true,
                });

                for await (const event of response) {
                    console.log(event);
                }
              csharp: >
                using System;

                using System.ClientModel;

                using System.Threading.Tasks;


                using OpenAI.Responses;


                OpenAIResponseClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );


                string userInputText = "Hello!";


                ResponseCreationOptions options = new()

                {
                    Instructions = "You are a helpful assistant.",
                };


                AsyncCollectionResult<StreamingResponseUpdate> responseUpdates =
                client.CreateResponseStreamingAsync(userInputText, options);


                await foreach (StreamingResponseUpdate responseUpdate in responseUpdates)

                {
                    if (responseUpdate is StreamingResponseOutputTextDeltaUpdate outputTextDeltaUpdate)
                    {
                        Console.Write(outputTextDeltaUpdate.Delta);
                    }
                }
              node.js: |-
                import OpenAI from 'openai';

                const client = new OpenAI({
                  apiKey: 'My API Key',
                });

                const response = await client.responses.create();

                console.log(response.id);
              go: |
                package main

                import (
                  "context"
                  "fmt"

                  "github.com/openai/openai-go"
                  "github.com/openai/openai-go/option"
                  "github.com/openai/openai-go/responses"
                )

                func main() {
                  client := openai.NewClient(
                    option.WithAPIKey("My API Key"),
                  )
                  response, err := client.Responses.New(context.TODO(), responses.ResponseNewParams{

                  })
                  if err != nil {
                    panic(err.Error())
                  }
                  fmt.Printf("%+v\n", response.ID)
                }
              java: |-
                package com.openai.example;

                import com.openai.client.OpenAIClient;
                import com.openai.client.okhttp.OpenAIOkHttpClient;
                import com.openai.models.responses.Response;
                import com.openai.models.responses.ResponseCreateParams;

                public final class Main {
                    private Main() {}

                    public static void main(String[] args) {
                        OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                        Response response = client.responses().create();
                    }
                }
              ruby: |-
                require "openai"

                openai = OpenAI::Client.new(api_key: "My API Key")

                response = openai.responses.create

                puts(response)
            response: >
              event: response.created

              data:
              {"type":"response.created","response":{"id":"resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654","object":"response","created_at":1741290958,"status":"in_progress","error":null,"incomplete_details":null,"instructions":"You
              are a helpful
              assistant.","max_output_tokens":null,"model":"gpt-4.1-2025-04-14","output":[],"parallel_tool_calls":true,"previous_response_id":null,"reasoning":{"effort":null,"summary":null},"store":true,"temperature":1.0,"text":{"format":{"type":"text"}},"tool_choice":"auto","tools":[],"top_p":1.0,"truncation":"disabled","usage":null,"user":null,"metadata":{}}}


              event: response.in_progress

              data:
              {"type":"response.in_progress","response":{"id":"resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654","object":"response","created_at":1741290958,"status":"in_progress","error":null,"incomplete_details":null,"instructions":"You
              are a helpful
              assistant.","max_output_tokens":null,"model":"gpt-4.1-2025-04-14","output":[],"parallel_tool_calls":true,"previous_response_id":null,"reasoning":{"effort":null,"summary":null},"store":true,"temperature":1.0,"text":{"format":{"type":"text"}},"tool_choice":"auto","tools":[],"top_p":1.0,"truncation":"disabled","usage":null,"user":null,"metadata":{}}}


              event: response.output_item.added

              data:
              {"type":"response.output_item.added","output_index":0,"item":{"id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","type":"message","status":"in_progress","role":"assistant","content":[]}}


              event: response.content_part.added

              data:
              {"type":"response.content_part.added","item_id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","output_index":0,"content_index":0,"part":{"type":"output_text","text":"","annotations":[]}}


              event: response.output_text.delta

              data:
              {"type":"response.output_text.delta","item_id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","output_index":0,"content_index":0,"delta":"Hi"}


              ...


              event: response.output_text.done

              data:
              {"type":"response.output_text.done","item_id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","output_index":0,"content_index":0,"text":"Hi
              there! How can I assist you today?"}


              event: response.content_part.done

              data:
              {"type":"response.content_part.done","item_id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","output_index":0,"content_index":0,"part":{"type":"output_text","text":"Hi
              there! How can I assist you today?","annotations":[]}}


              event: response.output_item.done

              data:
              {"type":"response.output_item.done","output_index":0,"item":{"id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","type":"message","status":"completed","role":"assistant","content":[{"type":"output_text","text":"Hi
              there! How can I assist you today?","annotations":[]}]}}


              event: response.completed

              data:
              {"type":"response.completed","response":{"id":"resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654","object":"response","created_at":1741290958,"status":"completed","error":null,"incomplete_details":null,"instructions":"You
              are a helpful
              assistant.","max_output_tokens":null,"model":"gpt-4.1-2025-04-14","output":[{"id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","type":"message","status":"completed","role":"assistant","content":[{"type":"output_text","text":"Hi
              there! How can I assist you
              today?","annotations":[]}]}],"parallel_tool_calls":true,"previous_response_id":null,"reasoning":{"effort":null,"summary":null},"store":true,"temperature":1.0,"text":{"format":{"type":"text"}},"tool_choice":"auto","tools":[],"top_p":1.0,"truncation":"disabled","usage":{"input_tokens":37,"output_tokens":11,"output_tokens_details":{"reasoning_tokens":0},"total_tokens":48},"user":null,"metadata":{}}}
          - title: Functions
            request:
              curl: |
                curl https://api.openai.com/v1/responses \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "gpt-4.1",
                    "input": "What is the weather like in Boston today?",
                    "tools": [
                      {
                        "type": "function",
                        "name": "get_current_weather",
                        "description": "Get the current weather in a given location",
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "location": {
                              "type": "string",
                              "description": "The city and state, e.g. San Francisco, CA"
                            },
                            "unit": {
                              "type": "string",
                              "enum": ["celsius", "fahrenheit"]
                            }
                          },
                          "required": ["location", "unit"]
                        }
                      }
                    ],
                    "tool_choice": "auto"
                  }'
              python: |-
                from openai import OpenAI

                client = OpenAI(
                    api_key="My API Key",
                )
                response = client.responses.create()
                print(response.id)
              javascript: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                const tools = [
                    {
                        type: "function",
                        name: "get_current_weather",
                        description: "Get the current weather in a given location",
                        parameters: {
                            type: "object",
                            properties: {
                                location: {
                                    type: "string",
                                    description: "The city and state, e.g. San Francisco, CA",
                                },
                                unit: { type: "string", enum: ["celsius", "fahrenheit"] },
                            },
                            required: ["location", "unit"],
                        },
                    },
                ];

                const response = await openai.responses.create({
                    model: "gpt-4.1",
                    tools: tools,
                    input: "What is the weather like in Boston today?",
                    tool_choice: "auto",
                });

                console.log(response);
              csharp: |
                using System;
                using OpenAI.Responses;

                OpenAIResponseClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );

                ResponseTool getCurrentWeatherFunctionTool = ResponseTool.CreateFunctionTool(
                    functionName: "get_current_weather",
                    functionDescription: "Get the current weather in a given location",
                    functionParameters: BinaryData.FromString("""
                        {
                            "type": "object",
                            "properties": {
                                "location": {
                                    "type": "string",
                                    "description": "The city and state, e.g. San Francisco, CA"
                                },
                                "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]}
                            },
                            "required": ["location", "unit"]
                        }
                        """
                    )
                );

                string userInputText = "What is the weather like in Boston today?";

                ResponseCreationOptions options = new()
                {
                    Tools =
                    {
                        getCurrentWeatherFunctionTool
                    },
                    ToolChoice = ResponseToolChoice.CreateAutoChoice(),
                };

                OpenAIResponse response = client.CreateResponse(userInputText, options);
              node.js: |-
                import OpenAI from 'openai';

                const client = new OpenAI({
                  apiKey: 'My API Key',
                });

                const response = await client.responses.create();

                console.log(response.id);
              go: |
                package main

                import (
                  "context"
                  "fmt"

                  "github.com/openai/openai-go"
                  "github.com/openai/openai-go/option"
                  "github.com/openai/openai-go/responses"
                )

                func main() {
                  client := openai.NewClient(
                    option.WithAPIKey("My API Key"),
                  )
                  response, err := client.Responses.New(context.TODO(), responses.ResponseNewParams{

                  })
                  if err != nil {
                    panic(err.Error())
                  }
                  fmt.Printf("%+v\n", response.ID)
                }
              java: |-
                package com.openai.example;

                import com.openai.client.OpenAIClient;
                import com.openai.client.okhttp.OpenAIOkHttpClient;
                import com.openai.models.responses.Response;
                import com.openai.models.responses.ResponseCreateParams;

                public final class Main {
                    private Main() {}

                    public static void main(String[] args) {
                        OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                        Response response = client.responses().create();
                    }
                }
              ruby: |-
                require "openai"

                openai = OpenAI::Client.new(api_key: "My API Key")

                response = openai.responses.create

                puts(response)
            response: |
              {
                "id": "resp_67ca09c5efe0819096d0511c92b8c890096610f474011cc0",
                "object": "response",
                "created_at": 1741294021,
                "status": "completed",
                "error": null,
                "incomplete_details": null,
                "instructions": null,
                "max_output_tokens": null,
                "model": "gpt-4.1-2025-04-14",
                "output": [
                  {
                    "type": "function_call",
                    "id": "fc_67ca09c6bedc8190a7abfec07b1a1332096610f474011cc0",
                    "call_id": "call_unLAR8MvFNptuiZK6K6HCy5k",
                    "name": "get_current_weather",
                    "arguments": "{\"location\":\"Boston, MA\",\"unit\":\"celsius\"}",
                    "status": "completed"
                  }
                ],
                "parallel_tool_calls": true,
                "previous_response_id": null,
                "reasoning": {
                  "effort": null,
                  "summary": null
                },
                "store": true,
                "temperature": 1.0,
                "text": {
                  "format": {
                    "type": "text"
                  }
                },
                "tool_choice": "auto",
                "tools": [
                  {
                    "type": "function",
                    "description": "Get the current weather in a given location",
                    "name": "get_current_weather",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string",
                          "description": "The city and state, e.g. San Francisco, CA"
                        },
                        "unit": {
                          "type": "string",
                          "enum": [
                            "celsius",
                            "fahrenheit"
                          ]
                        }
                      },
                      "required": [
                        "location",
                        "unit"
                      ]
                    },
                    "strict": true
                  }
                ],
                "top_p": 1.0,
                "truncation": "disabled",
                "usage": {
                  "input_tokens": 291,
                  "output_tokens": 23,
                  "output_tokens_details": {
                    "reasoning_tokens": 0
                  },
                  "total_tokens": 314
                },
                "user": null,
                "metadata": {}
              }
          - title: Reasoning
            request:
              curl: |
                curl https://api.openai.com/v1/responses \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "o3-mini",
                    "input": "How much wood would a woodchuck chuck?",
                    "reasoning": {
                      "effort": "high"
                    }
                  }'
              javascript: |
                import OpenAI from "openai";
                const openai = new OpenAI();

                const response = await openai.responses.create({
                    model: "o3-mini",
                    input: "How much wood would a woodchuck chuck?",
                    reasoning: {
                      effort: "high"
                    }
                });

                console.log(response);
              python: |-
                from openai import OpenAI

                client = OpenAI(
                    api_key="My API Key",
                )
                response = client.responses.create()
                print(response.id)
              csharp: |
                using System;
                using OpenAI.Responses;

                OpenAIResponseClient client = new(
                    model: "o3-mini",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );

                string userInputText = "How much wood would a woodchuck chuck?";

                ResponseCreationOptions options = new()
                {
                    ReasoningOptions = new()
                    {
                        ReasoningEffortLevel = ResponseReasoningEffortLevel.High,
                    },
                };

                OpenAIResponse response = client.CreateResponse(userInputText, options);

                Console.WriteLine(response.GetOutputText());
              node.js: |-
                import OpenAI from 'openai';

                const client = new OpenAI({
                  apiKey: 'My API Key',
                });

                const response = await client.responses.create();

                console.log(response.id);
              go: |
                package main

                import (
                  "context"
                  "fmt"

                  "github.com/openai/openai-go"
                  "github.com/openai/openai-go/option"
                  "github.com/openai/openai-go/responses"
                )

                func main() {
                  client := openai.NewClient(
                    option.WithAPIKey("My API Key"),
                  )
                  response, err := client.Responses.New(context.TODO(), responses.ResponseNewParams{

                  })
                  if err != nil {
                    panic(err.Error())
                  }
                  fmt.Printf("%+v\n", response.ID)
                }
              java: |-
                package com.openai.example;

                import com.openai.client.OpenAIClient;
                import com.openai.client.okhttp.OpenAIOkHttpClient;
                import com.openai.models.responses.Response;
                import com.openai.models.responses.ResponseCreateParams;

                public final class Main {
                    private Main() {}

                    public static void main(String[] args) {
                        OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                        Response response = client.responses().create();
                    }
                }
              ruby: |-
                require "openai"

                openai = OpenAI::Client.new(api_key: "My API Key")

                response = openai.responses.create

                puts(response)
            response: |
              {
                "id": "resp_67ccd7eca01881908ff0b5146584e408072912b2993db808",
                "object": "response",
                "created_at": 1741477868,
                "status": "completed",
                "error": null,
                "incomplete_details": null,
                "instructions": null,
                "max_output_tokens": null,
                "model": "o1-2024-12-17",
                "output": [
                  {
                    "type": "message",
                    "id": "msg_67ccd7f7b5848190a6f3e95d809f6b44072912b2993db808",
                    "status": "completed",
                    "role": "assistant",
                    "content": [
                      {
                        "type": "output_text",
                        "text": "The classic tongue twister...",
                        "annotations": []
                      }
                    ]
                  }
                ],
                "parallel_tool_calls": true,
                "previous_response_id": null,
                "reasoning": {
                  "effort": "high",
                  "summary": null
                },
                "store": true,
                "temperature": 1.0,
                "text": {
                  "format": {
                    "type": "text"
                  }
                },
                "tool_choice": "auto",
                "tools": [],
                "top_p": 1.0,
                "truncation": "disabled",
                "usage": {
                  "input_tokens": 81,
                  "input_tokens_details": {
                    "cached_tokens": 0
                  },
                  "output_tokens": 1035,
                  "output_tokens_details": {
                    "reasoning_tokens": 832
                  },
                  "total_tokens": 1116
                },
                "user": null,
                "metadata": {}
              }
      description: >
        Creates a model response. Provide [text](https://platform.openai.com/docs/guides/text) or

        [image](https://platform.openai.com/docs/guides/images) inputs to generate
        [text](https://platform.openai.com/docs/guides/text)

        or [JSON](https://platform.openai.com/docs/guides/structured-outputs) outputs. Have the model call

        your own [custom code](https://platform.openai.com/docs/guides/function-calling) or use built-in

        [tools](https://platform.openai.com/docs/guides/tools) like [web
        search](https://platform.openai.com/docs/guides/tools-web-search)

        or [file search](https://platform.openai.com/docs/guides/tools-file-search) to use your own data

        as input for the model's response.
  /responses/{response_id}:
    get:
      operationId: getResponse
      tags:
        - Responses
      summary: Get a model response
      parameters:
        - in: path
          name: response_id
          required: true
          schema:
            type: string
            example: resp_677efb5139a88190b512bc3fef8e535d
          description: The ID of the response to retrieve.
        - in: query
          name: include
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Includable'
          description: |
            Additional fields to include in the response. See the `include`
            parameter for Response creation above for more information.
        - in: query
          name: stream
          schema:
            type: boolean
          description: >
            If set to true, the model response data will be streamed to the client

            as it is generated using [server-sent
            events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).

            See the [Streaming section
            below](https://platform.openai.com/docs/api-reference/responses-streaming)

            for more information.
        - in: query
          name: starting_after
          schema:
            type: integer
          description: |
            The sequence number of the event after which to start streaming.
        - in: query
          name: include_obfuscation
          schema:
            type: boolean
          description: |
            When true, stream obfuscation will be enabled. Stream obfuscation adds
            random characters to an `obfuscation` field on streaming delta events
            to normalize payload sizes as a mitigation to certain side-channel
            attacks. These obfuscation fields are included by default, but add a
            small amount of overhead to the data stream. You can set
            `include_obfuscation` to false to optimize for bandwidth if you trust
            the network links between your application and the OpenAI API.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      x-oaiMeta:
        name: Get a model response
        group: responses
        returns: |
          The [Response](https://platform.openai.com/docs/api-reference/responses/object) object matching the
          specified ID.
        examples:
          response: |
            {
              "id": "resp_67cb71b351908190a308f3859487620d06981a8637e6bc44",
              "object": "response",
              "created_at": 1741386163,
              "status": "completed",
              "error": null,
              "incomplete_details": null,
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-2024-08-06",
              "output": [
                {
                  "type": "message",
                  "id": "msg_67cb71b3c2b0819084d481baaaf148f206981a8637e6bc44",
                  "status": "completed",
                  "role": "assistant",
                  "content": [
                    {
                      "type": "output_text",
                      "text": "Silent circuits hum,  \nThoughts emerge in data streams—  \nDigital dawn breaks.",
                      "annotations": []
                    }
                  ]
                }
              ],
              "parallel_tool_calls": true,
              "previous_response_id": null,
              "reasoning": {
                "effort": null,
                "summary": null
              },
              "store": true,
              "temperature": 1.0,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1.0,
              "truncation": "disabled",
              "usage": {
                "input_tokens": 32,
                "input_tokens_details": {
                  "cached_tokens": 0
                },
                "output_tokens": 18,
                "output_tokens_details": {
                  "reasoning_tokens": 0
                },
                "total_tokens": 50
              },
              "user": null,
              "metadata": {}
            }
          request:
            curl: |
              curl https://api.openai.com/v1/responses/resp_123 \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY"
            javascript: |
              import OpenAI from "openai";
              const client = new OpenAI();

              const response = await client.responses.retrieve("resp_123");
              console.log(response);
            python: |-
              from openai import OpenAI

              client = OpenAI(
                  api_key="My API Key",
              )
              response = client.responses.retrieve(
                  response_id="resp_677efb5139a88190b512bc3fef8e535d",
              )
              print(response.id)
            node.js: |-
              import OpenAI from 'openai';

              const client = new OpenAI({
                apiKey: 'My API Key',
              });

              const response = await client.responses.retrieve('resp_677efb5139a88190b512bc3fef8e535d');

              console.log(response.id);
            go: |
              package main

              import (
                "context"
                "fmt"

                "github.com/openai/openai-go"
                "github.com/openai/openai-go/option"
                "github.com/openai/openai-go/responses"
              )

              func main() {
                client := openai.NewClient(
                  option.WithAPIKey("My API Key"),
                )
                response, err := client.Responses.Get(
                  context.TODO(),
                  "resp_677efb5139a88190b512bc3fef8e535d",
                  responses.ResponseGetParams{

                  },
                )
                if err != nil {
                  panic(err.Error())
                }
                fmt.Printf("%+v\n", response.ID)
              }
            java: |-
              package com.openai.example;

              import com.openai.client.OpenAIClient;
              import com.openai.client.okhttp.OpenAIOkHttpClient;
              import com.openai.models.responses.Response;
              import com.openai.models.responses.ResponseRetrieveParams;

              public final class Main {
                  private Main() {}

                  public static void main(String[] args) {
                      OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                      Response response = client.responses().retrieve("resp_677efb5139a88190b512bc3fef8e535d");
                  }
              }
            ruby: |-
              require "openai"

              openai = OpenAI::Client.new(api_key: "My API Key")

              response = openai.responses.retrieve("resp_677efb5139a88190b512bc3fef8e535d")

              puts(response)
      description: |
        Retrieves a model response with the given ID.
    delete:
      operationId: deleteResponse
      tags:
        - Responses
      summary: Delete a model response
      parameters:
        - in: path
          name: response_id
          required: true
          schema:
            type: string
            example: resp_677efb5139a88190b512bc3fef8e535d
          description: The ID of the response to delete.
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-oaiMeta:
        name: Delete a model response
        group: responses
        returns: |
          A success message.
        examples:
          response: |
            {
              "id": "resp_6786a1bec27481909a17d673315b29f6",
              "object": "response",
              "deleted": true
            }
          request:
            curl: |
              curl -X DELETE https://api.openai.com/v1/responses/resp_123 \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY"
            javascript: |
              import OpenAI from "openai";
              const client = new OpenAI();

              const response = await client.responses.delete("resp_123");
              console.log(response);
            python: |-
              from openai import OpenAI

              client = OpenAI(
                  api_key="My API Key",
              )
              client.responses.delete(
                  "resp_677efb5139a88190b512bc3fef8e535d",
              )
            node.js: |-
              import OpenAI from 'openai';

              const client = new OpenAI({
                apiKey: 'My API Key',
              });

              await client.responses.delete('resp_677efb5139a88190b512bc3fef8e535d');
            go: |
              package main

              import (
                "context"

                "github.com/openai/openai-go"
                "github.com/openai/openai-go/option"
              )

              func main() {
                client := openai.NewClient(
                  option.WithAPIKey("My API Key"),
                )
                err := client.Responses.Delete(context.TODO(), "resp_677efb5139a88190b512bc3fef8e535d")
                if err != nil {
                  panic(err.Error())
                }
              }
            java: |-
              package com.openai.example;

              import com.openai.client.OpenAIClient;
              import com.openai.client.okhttp.OpenAIOkHttpClient;
              import com.openai.models.responses.ResponseDeleteParams;

              public final class Main {
                  private Main() {}

                  public static void main(String[] args) {
                      OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                      client.responses().delete("resp_677efb5139a88190b512bc3fef8e535d");
                  }
              }
            ruby: |-
              require "openai"

              openai = OpenAI::Client.new(api_key: "My API Key")

              result = openai.responses.delete("resp_677efb5139a88190b512bc3fef8e535d")

              puts(result)
      description: |
        Deletes a model response with the given ID.
  /responses/{response_id}/cancel:
    post:
      operationId: cancelResponse
      tags:
        - Responses
      summary: Cancel a response
      parameters:
        - in: path
          name: response_id
          required: true
          schema:
            type: string
            example: resp_677efb5139a88190b512bc3fef8e535d
          description: The ID of the response to cancel.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-oaiMeta:
        name: Cancel a response
        group: responses
        returns: |
          A [Response](https://platform.openai.com/docs/api-reference/responses/object) object.
        examples:
          response: |
            {
              "id": "resp_67cb71b351908190a308f3859487620d06981a8637e6bc44",
              "object": "response",
              "created_at": 1741386163,
              "status": "completed",
              "error": null,
              "incomplete_details": null,
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-2024-08-06",
              "output": [
                {
                  "type": "message",
                  "id": "msg_67cb71b3c2b0819084d481baaaf148f206981a8637e6bc44",
                  "status": "completed",
                  "role": "assistant",
                  "content": [
                    {
                      "type": "output_text",
                      "text": "Silent circuits hum,  \nThoughts emerge in data streams—  \nDigital dawn breaks.",
                      "annotations": []
                    }
                  ]
                }
              ],
              "parallel_tool_calls": true,
              "previous_response_id": null,
              "reasoning": {
                "effort": null,
                "summary": null
              },
              "store": true,
              "temperature": 1.0,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1.0,
              "truncation": "disabled",
              "usage": {
                "input_tokens": 32,
                "input_tokens_details": {
                  "cached_tokens": 0
                },
                "output_tokens": 18,
                "output_tokens_details": {
                  "reasoning_tokens": 0
                },
                "total_tokens": 50
              },
              "user": null,
              "metadata": {}
            }
          request:
            curl: |
              curl -X POST https://api.openai.com/v1/responses/resp_123/cancel \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY"
            javascript: |
              import OpenAI from "openai";
              const client = new OpenAI();

              const response = await client.responses.cancel("resp_123");
              console.log(response);  
            python: |-
              from openai import OpenAI

              client = OpenAI(
                  api_key="My API Key",
              )
              response = client.responses.cancel(
                  "resp_677efb5139a88190b512bc3fef8e535d",
              )
              print(response.id)
            node.js: |-
              import OpenAI from 'openai';

              const client = new OpenAI({
                apiKey: 'My API Key',
              });

              const response = await client.responses.cancel('resp_677efb5139a88190b512bc3fef8e535d');

              console.log(response.id);
            go: |
              package main

              import (
                "context"
                "fmt"

                "github.com/openai/openai-go"
                "github.com/openai/openai-go/option"
              )

              func main() {
                client := openai.NewClient(
                  option.WithAPIKey("My API Key"),
                )
                response, err := client.Responses.Cancel(context.TODO(), "resp_677efb5139a88190b512bc3fef8e535d")
                if err != nil {
                  panic(err.Error())
                }
                fmt.Printf("%+v\n", response.ID)
              }
            java: |-
              package com.openai.example;

              import com.openai.client.OpenAIClient;
              import com.openai.client.okhttp.OpenAIOkHttpClient;
              import com.openai.models.responses.Response;
              import com.openai.models.responses.ResponseCancelParams;

              public final class Main {
                  private Main() {}

                  public static void main(String[] args) {
                      OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                      Response response = client.responses().cancel("resp_677efb5139a88190b512bc3fef8e535d");
                  }
              }
            ruby: |-
              require "openai"

              openai = OpenAI::Client.new(api_key: "My API Key")

              response = openai.responses.cancel("resp_677efb5139a88190b512bc3fef8e535d")

              puts(response)
      description: |
        Cancels a model response with the given ID. Only responses created with
        the `background` parameter set to `true` can be cancelled. 
        [Learn more](https://platform.openai.com/docs/guides/background).
  /responses/{response_id}/input_items:
    get:
      operationId: listInputItems
      tags:
        - Responses
      summary: List input items
      parameters:
        - in: path
          name: response_id
          required: true
          schema:
            type: string
          description: The ID of the response to retrieve input items for.
        - name: limit
          in: query
          description: |
            A limit on the number of objects to be returned. Limit can range between
            1 and 100, and the default is 20.
          required: false
          schema:
            type: integer
            default: 20
        - in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
          description: |
            The order to return the input items in. Default is `desc`.
            - `asc`: Return the input items in ascending order.
            - `desc`: Return the input items in descending order.
        - in: query
          name: after
          schema:
            type: string
          description: |
            An item ID to list items after, used in pagination.
        - in: query
          name: include
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Includable'
          description: |
            Additional fields to include in the response. See the `include`
            parameter for Response creation above for more information.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseItemList'
      x-oaiMeta:
        name: List input items
        group: responses
        returns: A list of input item objects.
        examples:
          response: |
            {
              "object": "list",
              "data": [
                {
                  "id": "msg_abc123",
                  "type": "message",
                  "role": "user",
                  "content": [
                    {
                      "type": "input_text",
                      "text": "Tell me a three sentence bedtime story about a unicorn."
                    }
                  ]
                }
              ],
              "first_id": "msg_abc123",
              "last_id": "msg_abc123",
              "has_more": false
            }
          request:
            curl: |
              curl https://api.openai.com/v1/responses/resp_abc123/input_items \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            javascript: |
              import OpenAI from "openai";
              const client = new OpenAI();

              const response = await client.responses.inputItems.list("resp_123");
              console.log(response.data);
            python: |-
              from openai import OpenAI

              client = OpenAI(
                  api_key="My API Key",
              )
              page = client.responses.input_items.list(
                  response_id="response_id",
              )
              page = page.data[0]
              print(page)
            node.js: |-
              import OpenAI from 'openai';

              const client = new OpenAI({
                apiKey: 'My API Key',
              });

              // Automatically fetches more pages as needed.
              for await (const responseItem of client.responses.inputItems.list('response_id')) {
                console.log(responseItem);
              }
            go: |
              package main

              import (
                "context"
                "fmt"

                "github.com/openai/openai-go"
                "github.com/openai/openai-go/option"
                "github.com/openai/openai-go/responses"
              )

              func main() {
                client := openai.NewClient(
                  option.WithAPIKey("My API Key"),
                )
                page, err := client.Responses.InputItems.List(
                  context.TODO(),
                  "response_id",
                  responses.InputItemListParams{

                  },
                )
                if err != nil {
                  panic(err.Error())
                }
                fmt.Printf("%+v\n", page)
              }
            java: |-
              package com.openai.example;

              import com.openai.client.OpenAIClient;
              import com.openai.client.okhttp.OpenAIOkHttpClient;
              import com.openai.models.responses.inputitems.InputItemListPage;
              import com.openai.models.responses.inputitems.InputItemListParams;

              public final class Main {
                  private Main() {}

                  public static void main(String[] args) {
                      OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                      InputItemListPage page = client.responses().inputItems().list("response_id");
                  }
              }
            ruby: |-
              require "openai"

              openai = OpenAI::Client.new(api_key: "My API Key")

              page = openai.responses.input_items.list("response_id")

              puts(page)
      description: Returns a list of input items for a given response.
