openapi: 3.1.0
info:
  title: OpenAI API
  description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  version: 2.3.0
  termsOfService: https://openai.com/policies/terms-of-use
  contact:
    name: OpenAI Support
    url: https://help.openai.com/
  license:
    name: MIT
    url: https://github.com/openai/openai-openapi/blob/master/LICENSE
servers:
  - url: https://api.openai.com/v1
security:
  - ApiKeyAuth: []
tags:
  - name: Chat
    description: Given a list of messages comprising a conversation, the model will return a response.
  - name: Completions
    description: >-
      Given a prompt, the model will return one or more predicted completions, and can also return the
      probabilities of alternative tokens at each position.
paths:
  /completions:
    post:
      operationId: createCompletion
      tags:
        - Completions
      summary: Create completion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompletionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCompletionResponse'
      x-oaiMeta:
        name: Create completion
        group: completions
        returns: >
          Returns a [completion](https://platform.openai.com/docs/api-reference/completions/object) object, or
          a sequence of completion objects if the request is streamed.
        legacy: true
        examples:
          - title: No streaming
            request:
              curl: |
                curl https://api.openai.com/v1/completions \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "VAR_completion_model_id",
                    "prompt": "Say this is a test",
                    "max_tokens": 7,
                    "temperature": 0
                  }'
              python: |-
                from openai import OpenAI

                client = OpenAI(
                    api_key="My API Key",
                )
                completion = client.completions.create(
                    model="string",
                    prompt="This is a test.",
                )
                print(completion)
              node.js: >-
                import OpenAI from 'openai';


                const client = new OpenAI({
                  apiKey: 'My API Key',
                });


                const completion = await client.completions.create({ model: 'string', prompt: 'This is a
                test.' });


                console.log(completion);
              go: |
                package main

                import (
                  "context"
                  "fmt"

                  "github.com/openai/openai-go"
                  "github.com/openai/openai-go/option"
                )

                func main() {
                  client := openai.NewClient(
                    option.WithAPIKey("My API Key"),
                  )
                  completion, err := client.Completions.New(context.TODO(), openai.CompletionNewParams{
                    Model: openai.CompletionNewParamsModelGPT3_5TurboInstruct,
                    Prompt: openai.CompletionNewParamsPromptUnion{
                      OfString: openai.String("This is a test."),
                    },
                  })
                  if err != nil {
                    panic(err.Error())
                  }
                  fmt.Printf("%+v\n", completion)
                }
              java: |-
                package com.openai.example;

                import com.openai.client.OpenAIClient;
                import com.openai.client.okhttp.OpenAIOkHttpClient;
                import com.openai.models.completions.Completion;
                import com.openai.models.completions.CompletionCreateParams;

                public final class Main {
                    private Main() {}

                    public static void main(String[] args) {
                        OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                        CompletionCreateParams params = CompletionCreateParams.builder()
                            .model(CompletionCreateParams.Model.GPT_3_5_TURBO_INSTRUCT)
                            .prompt("This is a test.")
                            .build();
                        Completion completion = client.completions().create(params);
                    }
                }
              ruby: >-
                require "openai"


                openai = OpenAI::Client.new(api_key: "My API Key")


                completion = openai.completions.create(model: :"gpt-3.5-turbo-instruct", prompt: "This is a
                test.")


                puts(completion)
            response: |
              {
                "id": "cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7",
                "object": "text_completion",
                "created": 1589478378,
                "model": "VAR_completion_model_id",
                "system_fingerprint": "fp_44709d6fcb",
                "choices": [
                  {
                    "text": "\n\nThis is indeed a test",
                    "index": 0,
                    "logprobs": null,
                    "finish_reason": "length"
                  }
                ],
                "usage": {
                  "prompt_tokens": 5,
                  "completion_tokens": 7,
                  "total_tokens": 12
                }
              }
          - title: Streaming
            request:
              curl: |
                curl https://api.openai.com/v1/completions \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "VAR_completion_model_id",
                    "prompt": "Say this is a test",
                    "max_tokens": 7,
                    "temperature": 0,
                    "stream": true
                  }'
              python: |-
                from openai import OpenAI

                client = OpenAI(
                    api_key="My API Key",
                )
                completion = client.completions.create(
                    model="string",
                    prompt="This is a test.",
                )
                print(completion)
              node.js: >-
                import OpenAI from 'openai';


                const client = new OpenAI({
                  apiKey: 'My API Key',
                });


                const completion = await client.completions.create({ model: 'string', prompt: 'This is a
                test.' });


                console.log(completion);
              go: |
                package main

                import (
                  "context"
                  "fmt"

                  "github.com/openai/openai-go"
                  "github.com/openai/openai-go/option"
                )

                func main() {
                  client := openai.NewClient(
                    option.WithAPIKey("My API Key"),
                  )
                  completion, err := client.Completions.New(context.TODO(), openai.CompletionNewParams{
                    Model: openai.CompletionNewParamsModelGPT3_5TurboInstruct,
                    Prompt: openai.CompletionNewParamsPromptUnion{
                      OfString: openai.String("This is a test."),
                    },
                  })
                  if err != nil {
                    panic(err.Error())
                  }
                  fmt.Printf("%+v\n", completion)
                }
              java: |-
                package com.openai.example;

                import com.openai.client.OpenAIClient;
                import com.openai.client.okhttp.OpenAIOkHttpClient;
                import com.openai.models.completions.Completion;
                import com.openai.models.completions.CompletionCreateParams;

                public final class Main {
                    private Main() {}

                    public static void main(String[] args) {
                        OpenAIClient client = OpenAIOkHttpClient.fromEnv();

                        CompletionCreateParams params = CompletionCreateParams.builder()
                            .model(CompletionCreateParams.Model.GPT_3_5_TURBO_INSTRUCT)
                            .prompt("This is a test.")
                            .build();
                        Completion completion = client.completions().create(params);
                    }
                }
              ruby: >-
                require "openai"


                openai = OpenAI::Client.new(api_key: "My API Key")


                completion = openai.completions.create(model: :"gpt-3.5-turbo-instruct", prompt: "This is a
                test.")


                puts(completion)
            response: |
              {
                "id": "cmpl-7iA7iJjj8V2zOkCGvWF2hAkDWBQZe",
                "object": "text_completion",
                "created": 1690759702,
                "choices": [
                  {
                    "text": "This",
                    "index": 0,
                    "logprobs": null,
                    "finish_reason": null
                  }
                ],
                "model": "gpt-3.5-turbo-instruct"
                "system_fingerprint": "fp_44709d6fcb",
              }
      description: Creates a completion for the provided prompt and parameters.
